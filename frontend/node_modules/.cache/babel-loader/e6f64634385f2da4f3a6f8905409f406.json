{"ast":null,"code":"// MessageParser starter code\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  } // This method is called inside the chatbot when it receives a message from the user.\n\n\n  parse(message) {\n    // Case: User is already logged in, proceed with normal message processing\n    if (this.state.userState !== null && this.state.sessionID !== null) {\n      let input_type = null;\n\n      if (this.state.inputType && this.state.inputType.length === 1) {\n        input_type = this.state.inputType[0];\n      } else {\n        input_type = this.state.inputType || null;\n      }\n\n      const currentOptionToShow = this.state.currentOptionToShow; // Handle protocol selection case\n\n      if (this.state.askingForProtocol) {\n        if (parseInt(message) >= 1 && parseInt(message) <= 20) {\n          const choice_info = {\n            user_id: this.state.userState,\n            session_id: this.state.sessionID,\n            user_choice: message,\n            input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n          };\n          this.actionProvider.stopAskingForProtocol();\n          return this.actionProvider.sendRequest(choice_info);\n        } else {\n          return this.actionProvider.askForProtocol();\n        }\n      } // Check if input matches expected options\n\n\n      const isValidInput = !currentOptionToShow || currentOptionToShow === \"Continue\" && message === \"Continue\" || currentOptionToShow === \"Emotion\" && (message === \"Happy\" || message === \"Sad\" || message === \"Angry\" || message === \"Neutral\") || currentOptionToShow === \"RecentDistant\" && (message === \"Recent\" || message === \"Distant\") || currentOptionToShow === \"Feedback\" && (message === \"Better\" || message === \"Worse\" || message === \"No change\") || currentOptionToShow === \"Protocol\" && this.state.protocols.includes(message) || currentOptionToShow === \"YesNo\" && (message === \"Yes\" || message === \"No\");\n\n      if (isValidInput) {\n        const choice_info = {\n          user_id: this.state.userState,\n          session_id: this.state.sessionID,\n          user_choice: message,\n          input_type: input_type\n        };\n        return this.actionProvider.sendRequest(choice_info);\n      } else {\n        // Provide helpful feedback instead of just repeating last message\n        this.actionProvider.handleInvalidInput(currentOptionToShow);\n      }\n    } // No fallback to login/password prompts when user is already logged in via main login page\n\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/MessageParser.js"],"names":["MessageParser","constructor","actionProvider","state","parse","message","userState","sessionID","input_type","inputType","length","currentOptionToShow","askingForProtocol","parseInt","choice_info","user_id","session_id","user_choice","stopAskingForProtocol","sendRequest","askForProtocol","isValidInput","protocols","includes","handleInvalidInput"],"mappings":"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","sourcesContent":["// MessageParser starter code\r\nclass MessageParser {\r\n  constructor(actionProvider, state) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n  }\r\n\r\n  // This method is called inside the chatbot when it receives a message from the user.\r\n  parse(message) {\r\n    // Case: User is already logged in, proceed with normal message processing\r\n    if (this.state.userState !== null && this.state.sessionID !== null) {\r\n      let input_type = null;\r\n      if (this.state.inputType && this.state.inputType.length === 1) {\r\n        input_type = this.state.inputType[0]\r\n      } else {\r\n        input_type = this.state.inputType || null\r\n      }\r\n      const currentOptionToShow = this.state.currentOptionToShow\r\n      \r\n      // Handle protocol selection case\r\n      if (this.state.askingForProtocol) {\r\n        if (parseInt(message) >= 1 && parseInt(message) <= 20) {\r\n          const choice_info = {\r\n            user_id: this.state.userState,\r\n            session_id: this.state.sessionID,\r\n            user_choice: message,\r\n            input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\r\n          };\r\n          this.actionProvider.stopAskingForProtocol();\r\n          return this.actionProvider.sendRequest(choice_info);\r\n        } else {\r\n          return this.actionProvider.askForProtocol();\r\n        }\r\n      }\r\n      \r\n      // Check if input matches expected options\r\n      const isValidInput = !currentOptionToShow || (\r\n        (currentOptionToShow === \"Continue\" && message === \"Continue\") ||\r\n        (currentOptionToShow === \"Emotion\" && (message === \"Happy\" || message === \"Sad\" || message === \"Angry\" || message === \"Neutral\")) ||\r\n        (currentOptionToShow === \"RecentDistant\" && (message === \"Recent\" || message === \"Distant\")) ||\r\n        (currentOptionToShow === \"Feedback\" && (message === \"Better\" || message === \"Worse\" || message === \"No change\")) ||\r\n        (currentOptionToShow === \"Protocol\" && this.state.protocols.includes(message)) ||\r\n        (currentOptionToShow === \"YesNo\" && (message === \"Yes\" || message === \"No\"))\r\n      );\r\n      \r\n      if (isValidInput) {\r\n        const choice_info = {\r\n          user_id: this.state.userState,\r\n          session_id: this.state.sessionID,\r\n          user_choice: message,\r\n          input_type: input_type,\r\n        };\r\n        return this.actionProvider.sendRequest(choice_info);\r\n      } else {\r\n        // Provide helpful feedback instead of just repeating last message\r\n        this.actionProvider.handleInvalidInput(currentOptionToShow);\r\n      }\r\n    }\r\n    // No fallback to login/password prompts when user is already logged in via main login page\r\n  }\r\n}\r\n\r\nexport default MessageParser;\r\n"]},"metadata":{},"sourceType":"module"}