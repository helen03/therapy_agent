{"ast":null,"code":"var _jsxFileName = \"/Users/liuyanjun/therapy_agent/frontend/src/widgets/options/GeneralOptions/InitialOptions.jsx\";\nimport React from 'react';\nimport { createChatBotMessage } from 'react-chatbot-kit';\nimport './InitialOptions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InitialOptions = props => {\n  console.log('InitialOptions received props:', props);\n  const {\n    setState,\n    actionProvider,\n    initialChoices,\n    state\n  } = props;\n\n  const handleChoice = choice => {\n    console.log('Initial choice selected:', choice);\n    console.log('Current state:', state); // Create client message for user's choice\n\n    const message = actionProvider.createClientMessage(choice);\n    actionProvider.addMessageToBotState(message); // Send the choice to the backend\n\n    const choice_info = {\n      user_id: state.userState,\n      session_id: state.sessionID,\n      user_choice: choice,\n      input_type: initialChoices\n    };\n    console.log('Sending choice_info:', choice_info);\n    actionProvider.sendRequest(choice_info);\n  };\n\n  if (!initialChoices || initialChoices.length === 0) {\n    console.log('No initial choices available');\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"initial-options-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-grid\",\n      children: initialChoices.map((choice, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"option-button\",\n        onClick: () => handleChoice(choice),\n        children: choice\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_c = InitialOptions;\nexport default InitialOptions;\n\nvar _c;\n\n$RefreshReg$(_c, \"InitialOptions\");","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/widgets/options/GeneralOptions/InitialOptions.jsx"],"names":["React","createChatBotMessage","InitialOptions","props","console","log","setState","actionProvider","initialChoices","state","handleChoice","choice","message","createClientMessage","addMessageToBotState","choice_info","user_id","userState","session_id","sessionID","user_choice","input_type","sendRequest","length","map","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAO,sBAAP;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,KAA9C;AACA,QAAM;AAAEG,IAAAA,QAAF;AAAYC,IAAAA,cAAZ;AAA4BC,IAAAA,cAA5B;AAA4CC,IAAAA;AAA5C,MAAsDN,KAA5D;;AAEA,QAAMO,YAAY,GAAIC,MAAD,IAAY;AAC/BP,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCM,MAAxC;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BI,KAA9B,EAF+B,CAI/B;;AACA,UAAMG,OAAO,GAAGL,cAAc,CAACM,mBAAf,CAAmCF,MAAnC,CAAhB;AACAJ,IAAAA,cAAc,CAACO,oBAAf,CAAoCF,OAApC,EAN+B,CAQ/B;;AACA,UAAMG,WAAW,GAAG;AAClBC,MAAAA,OAAO,EAAEP,KAAK,CAACQ,SADG;AAElBC,MAAAA,UAAU,EAAET,KAAK,CAACU,SAFA;AAGlBC,MAAAA,WAAW,EAAET,MAHK;AAIlBU,MAAAA,UAAU,EAAEb;AAJM,KAApB;AAOAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCU,WAApC;AACAR,IAAAA,cAAc,CAACe,WAAf,CAA2BP,WAA3B;AACD,GAlBD;;AAoBA,MAAI,CAACP,cAAD,IAAmBA,cAAc,CAACe,MAAf,KAA0B,CAAjD,EAAoD;AAClDnB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,WAAO,IAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,cAAc,CAACgB,GAAf,CAAmB,CAACb,MAAD,EAASc,KAAT,kBAClB;AAEE,QAAA,SAAS,EAAC,eAFZ;AAGE,QAAA,OAAO,EAAE,MAAMf,YAAY,CAACC,MAAD,CAH7B;AAAA,kBAKGA;AALH,SACOc,KADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA5CD;;KAAMvB,c;AA8CN,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport { createChatBotMessage } from 'react-chatbot-kit';\nimport './InitialOptions.css';\n\nconst InitialOptions = (props) => {\n  console.log('InitialOptions received props:', props);\n  const { setState, actionProvider, initialChoices, state } = props;\n\n  const handleChoice = (choice) => {\n    console.log('Initial choice selected:', choice);\n    console.log('Current state:', state);\n    \n    // Create client message for user's choice\n    const message = actionProvider.createClientMessage(choice);\n    actionProvider.addMessageToBotState(message);\n\n    // Send the choice to the backend\n    const choice_info = {\n      user_id: state.userState,\n      session_id: state.sessionID,\n      user_choice: choice,\n      input_type: initialChoices\n    };\n    \n    console.log('Sending choice_info:', choice_info);\n    actionProvider.sendRequest(choice_info);\n  };\n\n  if (!initialChoices || initialChoices.length === 0) {\n    console.log('No initial choices available');\n    return null;\n  }\n\n  return (\n    <div className=\"initial-options-container\">\n      <div className=\"options-grid\">\n        {initialChoices.map((choice, index) => (\n          <button\n            key={index}\n            className=\"option-button\"\n            onClick={() => handleChoice(choice)}\n          >\n            {choice}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default InitialOptions;"]},"metadata":{},"sourceType":"module"}