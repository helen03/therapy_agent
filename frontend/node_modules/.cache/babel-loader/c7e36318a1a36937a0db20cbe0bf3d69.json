{"ast":null,"code":"// MessageParser starter code\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  } // This method is called inside the chatbot when it receives a message from the user.\n\n\n  parse(message) {\n    console.log('MessageParser received:', message);\n    console.log('Current state:', this.state); // Case: User is already logged in, proceed with normal message processing\n\n    if (this.state.userState !== null && this.state.sessionID !== null) {\n      console.log('User is logged in, processing message...');\n      let input_type = null;\n\n      if (this.state.inputType && this.state.inputType.length === 1) {\n        input_type = this.state.inputType[0];\n      } else {\n        input_type = this.state.inputType || null;\n      }\n\n      const currentOptionToShow = this.state.currentOptionToShow; // Handle protocol selection case\n\n      if (this.state.askingForProtocol) {\n        if (parseInt(message) >= 1 && parseInt(message) <= 20) {\n          const choice_info = {\n            user_id: this.state.userState,\n            session_id: this.state.sessionID,\n            user_choice: message,\n            input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n          };\n          this.actionProvider.stopAskingForProtocol();\n          return this.actionProvider.sendRequest(choice_info);\n        } else {\n          return this.actionProvider.askForProtocol();\n        }\n      } // Check if input matches expected options\n      // 修改为总是允许自由文本输入，不进行选项验证\n\n\n      const isValidInput = true;\n      console.log('Input validation bypassed, allowing free text input');\n\n      if (isValidInput) {\n        const choice_info = {\n          user_id: this.state.userState,\n          session_id: this.state.sessionID,\n          user_choice: message,\n          input_type: input_type\n        };\n        console.log('Sending choice_info:', choice_info);\n        return this.actionProvider.sendRequest(choice_info);\n      } else {\n        // 保留处理无效输入的逻辑，但正常情况下不会执行到这里\n        console.log('Invalid input, showing feedback');\n        this.actionProvider.handleInvalidInput(currentOptionToShow);\n      }\n    } else {\n      console.log('User not logged in, ignoring message');\n      console.log('userState:', this.state.userState);\n      console.log('sessionID:', this.state.sessionID);\n    } // No fallback to login/password prompts when user is already logged in via main login page\n\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/MessageParser.js"],"names":["MessageParser","constructor","actionProvider","state","parse","message","console","log","userState","sessionID","input_type","inputType","length","currentOptionToShow","askingForProtocol","parseInt","choice_info","user_id","session_id","user_choice","stopAskingForProtocol","sendRequest","askForProtocol","isValidInput","handleInvalidInput"],"mappings":"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","sourcesContent":["// MessageParser starter code\r\nclass MessageParser {\r\n  constructor(actionProvider, state) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n  }\r\n\r\n  // This method is called inside the chatbot when it receives a message from the user.\r\n  parse(message) {\r\n    console.log('MessageParser received:', message);\r\n    console.log('Current state:', this.state);\r\n    \r\n    // Case: User is already logged in, proceed with normal message processing\r\n    if (this.state.userState !== null && this.state.sessionID !== null) {\r\n      console.log('User is logged in, processing message...');\r\n      let input_type = null;\r\n      if (this.state.inputType && this.state.inputType.length === 1) {\r\n        input_type = this.state.inputType[0]\r\n      } else {\r\n        input_type = this.state.inputType || null\r\n      }\r\n      const currentOptionToShow = this.state.currentOptionToShow\r\n      \r\n      // Handle protocol selection case\r\n      if (this.state.askingForProtocol) {\r\n        if (parseInt(message) >= 1 && parseInt(message) <= 20) {\r\n          const choice_info = {\r\n            user_id: this.state.userState,\r\n            session_id: this.state.sessionID,\r\n            user_choice: message,\r\n            input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\r\n          };\r\n          this.actionProvider.stopAskingForProtocol();\r\n          return this.actionProvider.sendRequest(choice_info);\r\n        } else {\r\n          return this.actionProvider.askForProtocol();\r\n        }\r\n      }\r\n      \r\n      // Check if input matches expected options\r\n      // 修改为总是允许自由文本输入，不进行选项验证\r\n      const isValidInput = true;\r\n      \r\n      console.log('Input validation bypassed, allowing free text input');\r\n      \r\n      if (isValidInput) {\r\n        const choice_info = {\r\n          user_id: this.state.userState,\r\n          session_id: this.state.sessionID,\r\n          user_choice: message,\r\n          input_type: input_type,\r\n        };\r\n        console.log('Sending choice_info:', choice_info);\r\n        return this.actionProvider.sendRequest(choice_info);\r\n      } else {\r\n        // 保留处理无效输入的逻辑，但正常情况下不会执行到这里\r\n        console.log('Invalid input, showing feedback');\r\n        this.actionProvider.handleInvalidInput(currentOptionToShow);\r\n      }\r\n    } else {\r\n      console.log('User not logged in, ignoring message');\r\n      console.log('userState:', this.state.userState);\r\n      console.log('sessionID:', this.state.sessionID);\r\n    }\r\n    // No fallback to login/password prompts when user is already logged in via main login page\r\n  }\r\n}\r\n\r\nexport default MessageParser;\r\n"]},"metadata":{},"sourceType":"module"}