{"ast":null,"code":"/**\n * 环境检测工具\n * 用于检测当前运行环境并返回相应的配置\n */\nexport const getEnvironment = () => {\n  const hostname = window.location.hostname;\n  const protocol = window.location.protocol;\n  const port = window.location.port;\n  const isLocalhost = hostname === 'localhost' || hostname === '127.0.0.1';\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  const isProduction = process.env.NODE_ENV === 'production'; // API基础URL\n\n  let apiBaseUrl;\n\n  if (process.env.REACT_APP_API_BASE_URL) {\n    apiBaseUrl = process.env.REACT_APP_API_BASE_URL;\n  } else if (isLocalhost) {\n    apiBaseUrl = 'http://localhost:5001';\n  } else {\n    // 生产环境使用相对路径或根据域名推断\n    apiBaseUrl = port ? `${protocol}//${hostname}:${port}` : `${protocol}//${hostname}`; // 如果API端口与前端不同，需要指定端口\n\n    if (!port || port !== '5001') {\n      apiBaseUrl = `${protocol}//${hostname}:5001`;\n    }\n  }\n\n  return {\n    hostname,\n    protocol,\n    port,\n    isLocalhost,\n    isDevelopment,\n    isProduction,\n    apiBaseUrl,\n    nodeEnv: process.env.NODE_ENV,\n    reactEnv: process.env.REACT_APP_ENV\n  };\n}; // 调试信息输出\n\nexport const logEnvironment = () => {\n  const env = getEnvironment();\n  console.log('=== Environment Info ===');\n  console.log('Hostname:', env.hostname);\n  console.log('Protocol:', env.protocol);\n  console.log('Port:', env.port);\n  console.log('Is Localhost:', env.isLocalhost);\n  console.log('Is Development:', env.isDevelopment);\n  console.log('Is Production:', env.isProduction);\n  console.log('API Base URL:', env.apiBaseUrl);\n  console.log('Node Env:', env.nodeEnv);\n  console.log('React Env:', env.reactEnv);\n  console.log('=======================');\n};","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/utils/environment.js"],"names":["getEnvironment","hostname","window","location","protocol","port","isLocalhost","isDevelopment","process","env","NODE_ENV","isProduction","apiBaseUrl","REACT_APP_API_BASE_URL","nodeEnv","reactEnv","REACT_APP_ENV","logEnvironment","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,cAAc,GAAG,MAAM;AAClC,QAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBF,QAAjC;AACA,QAAMG,QAAQ,GAAGF,MAAM,CAACC,QAAP,CAAgBC,QAAjC;AACA,QAAMC,IAAI,GAAGH,MAAM,CAACC,QAAP,CAAgBE,IAA7B;AAEA,QAAMC,WAAW,GAAGL,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,WAA7D;AACA,QAAMM,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA/C;AACA,QAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA9C,CAPkC,CASlC;;AACA,MAAIE,UAAJ;;AACA,MAAIJ,OAAO,CAACC,GAAR,CAAYI,sBAAhB,EAAwC;AACtCD,IAAAA,UAAU,GAAGJ,OAAO,CAACC,GAAR,CAAYI,sBAAzB;AACD,GAFD,MAEO,IAAIP,WAAJ,EAAiB;AACtBM,IAAAA,UAAU,GAAG,uBAAb;AACD,GAFM,MAEA;AACL;AACAA,IAAAA,UAAU,GAAGP,IAAI,GAAI,GAAED,QAAS,KAAIH,QAAS,IAAGI,IAAK,EAApC,GAAyC,GAAED,QAAS,KAAIH,QAAS,EAAlF,CAFK,CAGL;;AACA,QAAI,CAACI,IAAD,IAASA,IAAI,KAAK,MAAtB,EAA8B;AAC5BO,MAAAA,UAAU,GAAI,GAAER,QAAS,KAAIH,QAAS,OAAtC;AACD;AACF;;AAED,SAAO;AACLA,IAAAA,QADK;AAELG,IAAAA,QAFK;AAGLC,IAAAA,IAHK;AAILC,IAAAA,WAJK;AAKLC,IAAAA,aALK;AAMLI,IAAAA,YANK;AAOLC,IAAAA,UAPK;AAQLE,IAAAA,OAAO,EAAEN,OAAO,CAACC,GAAR,CAAYC,QARhB;AASLK,IAAAA,QAAQ,EAAEP,OAAO,CAACC,GAAR,CAAYO;AATjB,GAAP;AAWD,CAnCM,C,CAqCP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAMR,GAAG,GAAGT,cAAc,EAA1B;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,GAAG,CAACR,QAA7B;AACAiB,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,GAAG,CAACL,QAA7B;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,GAAG,CAACJ,IAAzB;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,GAAG,CAACH,WAAjC;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BV,GAAG,CAACF,aAAnC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,GAAG,CAACE,YAAlC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,GAAG,CAACG,UAAjC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBV,GAAG,CAACK,OAA7B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BV,GAAG,CAACM,QAA9B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,CAbM","sourcesContent":["/**\n * 环境检测工具\n * 用于检测当前运行环境并返回相应的配置\n */\n\nexport const getEnvironment = () => {\n  const hostname = window.location.hostname;\n  const protocol = window.location.protocol;\n  const port = window.location.port;\n\n  const isLocalhost = hostname === 'localhost' || hostname === '127.0.0.1';\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  const isProduction = process.env.NODE_ENV === 'production';\n\n  // API基础URL\n  let apiBaseUrl;\n  if (process.env.REACT_APP_API_BASE_URL) {\n    apiBaseUrl = process.env.REACT_APP_API_BASE_URL;\n  } else if (isLocalhost) {\n    apiBaseUrl = 'http://localhost:5001';\n  } else {\n    // 生产环境使用相对路径或根据域名推断\n    apiBaseUrl = port ? `${protocol}//${hostname}:${port}` : `${protocol}//${hostname}`;\n    // 如果API端口与前端不同，需要指定端口\n    if (!port || port !== '5001') {\n      apiBaseUrl = `${protocol}//${hostname}:5001`;\n    }\n  }\n\n  return {\n    hostname,\n    protocol,\n    port,\n    isLocalhost,\n    isDevelopment,\n    isProduction,\n    apiBaseUrl,\n    nodeEnv: process.env.NODE_ENV,\n    reactEnv: process.env.REACT_APP_ENV,\n  };\n};\n\n// 调试信息输出\nexport const logEnvironment = () => {\n  const env = getEnvironment();\n  console.log('=== Environment Info ===');\n  console.log('Hostname:', env.hostname);\n  console.log('Protocol:', env.protocol);\n  console.log('Port:', env.port);\n  console.log('Is Localhost:', env.isLocalhost);\n  console.log('Is Development:', env.isDevelopment);\n  console.log('Is Production:', env.isProduction);\n  console.log('API Base URL:', env.apiBaseUrl);\n  console.log('Node Env:', env.nodeEnv);\n  console.log('React Env:', env.reactEnv);\n  console.log('=======================');\n};"]},"metadata":{},"sourceType":"module"}