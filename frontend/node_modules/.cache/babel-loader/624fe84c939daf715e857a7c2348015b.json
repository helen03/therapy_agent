{"ast":null,"code":"import axios from 'axios';\nimport { getEnvironment } from './utils/environment'; // ActionProvider starter code\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.askForPassword = username => {\n      this.setState(state => ({ ...state,\n        username: username\n      }));\n      const messages = this.createChatBotMessage(\"Please enter your password:\", {\n        withAvatar: true\n      });\n      this.addMessageToBotState(messages);\n    };\n\n    this.updateUserID = async (username, password) => {\n      this.setState(state => ({ ...state,\n        password: password\n      })); // Get API base URL from environment or use default\n\n      const apiBaseUrl = process.env.REACT_APP_API_BASE_URL || (window.location.hostname === 'localhost' ? 'http://localhost:5001' : `${window.location.protocol}//${window.location.hostname}:5001`);\n      const uri = `${apiBaseUrl}/api/login`;\n      let user_info = {\n        username: username,\n        password: password\n      };\n      const response = await axios.post(uri, {\n        user_info\n      }); // dataReceived format: {validID : bool, userID: string}\n\n      let dataReceived = response.data;\n\n      if (!dataReceived.validID) {\n        let message = this.createChatBotMessage(\"The ID and password combination is not valid, sorry. What is your user ID?\", {\n          withAvatar: true\n        });\n        this.addMessageToBotState(message); // let user_id_message = this.createChatBotMessage(\"What is your user ID?\",\n        //   { withAvatar: true,\n        //     delay: 1500 }\n        // );\n        // this.addMessageToBotState(user_id_message)\n\n        this.setState(state => ({ ...state,\n          username: null,\n          password: null\n        }));\n      } else {\n        let model_prompt = dataReceived.model_prompt;\n        this.setState(state => ({ ...state,\n          userState: dataReceived.userID,\n          inputType: dataReceived.choices,\n          sessionID: dataReceived.sessionID\n        }));\n        let message = this.createChatBotMessage(\"The user ID and password combination is valid, thank you!\", {\n          withAvatar: true\n        }); // Opening prompt -> open text\n\n        this.addMessageToBotState(message);\n        message = this.createChatBotMessage(model_prompt, {\n          withAvatar: true,\n          delay: 1500\n        });\n        this.addMessageToBotState(message);\n      }\n    };\n\n    this.sendRequest = async choice_info => {\n      try {\n        // Get API base URL from environment or use default\n        const apiBaseUrl = process.env.REACT_APP_API_BASE_URL || (window.location.hostname === 'localhost' ? 'http://localhost:5001' : `${window.location.protocol}//${window.location.hostname}:5001`);\n        const uri = `${apiBaseUrl}/api/update_session`;\n        console.log(\"Sending request to:\", uri);\n        console.log(\"Request data:\", choice_info);\n        const response = await axios.post(uri, {\n          choice_info\n        });\n        console.log(\"Received response:\", response.data); // Check if response is valid\n\n        if (response && response.data) {\n          this.handleReceivedData(response.data);\n        } else {\n          // Handle empty or invalid response\n          const errorMessage = this.createChatBotMessage(\"抱歉，我暂时无法处理您的请求。请稍后再试。\", {\n            withAvatar: true\n          });\n          this.addMessageToBotState(errorMessage);\n        }\n      } catch (error) {\n        console.error(\"API request failed:\", error); // 提供友好的错误消息给用户\n\n        const errorMessage = this.createChatBotMessage(\"抱歉，我暂时无法处理您的请求。请稍后再试。\", {\n          withAvatar: true\n        });\n        this.addMessageToBotState(errorMessage);\n      }\n    };\n\n    this.handleReceivedData = dataReceived => {\n      try {\n        // Validate data received\n        if (!dataReceived) {\n          console.error(\"No data received from backend\");\n          const errorMessage = this.createChatBotMessage(\"抱歉，我没有收到有效的响应。请稍后再试。\", {\n            withAvatar: true\n          });\n          this.addMessageToBotState(errorMessage);\n          return;\n        } // Extract response and options with fallbacks\n\n\n        const chatbotResponse = dataReceived.chatbot_response || dataReceived.response || \"感谢您的消息。我在这里支持您。\";\n        const userOptions = dataReceived.user_options || dataReceived.options || [];\n        const emotion = dataReceived.emotion || \"neutral\";\n        console.log(\"Processing response:\", {\n          chatbotResponse,\n          userOptions,\n          emotion\n        }); // Check if UltraThink mode is enabled\n\n        const isUltraThinkMode = this.state.ultraThinkMode;\n        let optionsToShow = null; // In UltraThink mode, minimize options and encourage natural conversation\n\n        if (isUltraThinkMode) {\n          // Only show options for critical situations or when specifically needed\n          if (userOptions.length === 1 && userOptions[0] === \"open_text\") {\n            optionsToShow = null;\n          } else if (userOptions.length === 2 && userOptions[0] === \"yes\" && userOptions[1] === \"no\") {\n            optionsToShow = \"YesNo\"; // Keep yes/no for important decisions\n          } else {\n            optionsToShow = null; // Hide most options in UltraThink mode\n          }\n        } else {\n          // Normal mode - show options as before\n          if (Array.isArray(userOptions)) {\n            if (userOptions.length === 1 && (userOptions[0] === \"open_text\" || userOptions[0] === \"any\")) {\n              optionsToShow = null;\n            } else if (userOptions.length === 1 && userOptions[0] === \"continue\") {\n              optionsToShow = \"Continue\";\n            } else if (userOptions.length === 2 && userOptions[0] === \"yes\" && userOptions[1] === \"no\") {\n              optionsToShow = \"YesNo\";\n            } else if (userOptions.length === 2 && userOptions[0] === \"recent\" && userOptions[1] === \"distant\") {\n              optionsToShow = \"RecentDistant\";\n            } else if (userOptions.length === 3 && userOptions[0] === \"positive\" && userOptions[1] === \"neutral\" && userOptions[2] === \"negative\") {\n              optionsToShow = \"Emotion\";\n            } else if (userOptions.length === 3 && userOptions[0] === \"better\" && userOptions[1] === \"worse\" && userOptions[2] === \"no change\") {\n              optionsToShow = \"Feedback\";\n            } else if (userOptions.length > 0) {\n              optionsToShow = \"InitialOptions\";\n              this.setState(state => ({ ...state,\n                initialChoices: userOptions,\n                inputType: userOptions\n              }));\n            }\n          }\n        }\n\n        this.setState(state => ({ ...state,\n          currentOptionToShow: optionsToShow\n        })); // Add emotion indicator if in UltraThink mode\n\n        let responseWithEmotion = chatbotResponse;\n\n        if (isUltraThinkMode && emotion !== \"neutral\") {\n          const emotionEmoji = {\n            \"happy\": \"😊\",\n            \"sad\": \"😢\",\n            \"angry\": \"😠\",\n            \"anxious\": \"😰\",\n            \"neutral\": \"\"\n          };\n          responseWithEmotion = `${emotionEmoji[emotion] || \"\"} ${chatbotResponse}`;\n        } // Handle responses - either strings or list of strings\n\n\n        if (typeof responseWithEmotion === \"string\") {\n          const messages = this.createChatBotMessage(responseWithEmotion, {\n            withAvatar: true,\n            widget: optionsToShow\n          });\n          this.addMessageToBotState(messages);\n        } else if (Array.isArray(responseWithEmotion)) {\n          for (let i = 0; i < responseWithEmotion.length; i++) {\n            let widget = null; // Shows options after last message\n\n            if (i === responseWithEmotion.length - 1) {\n              widget = optionsToShow;\n            }\n\n            const message_to_add = this.createChatBotMessage(responseWithEmotion[i], {\n              withAvatar: true,\n              widget: widget,\n              delay: i * 1500\n            });\n            this.addMessageToBotState(message_to_add);\n          }\n        } else {\n          // Fallback for unexpected response format\n          const fallbackMessage = this.createChatBotMessage(\"感谢您的消息。我在这里支持您。请告诉我更多关于您的感受。\", {\n            withAvatar: true,\n            widget: optionsToShow\n          });\n          this.addMessageToBotState(fallbackMessage);\n        }\n      } catch (error) {\n        console.error(\"Error handling received data:\", error);\n        const errorMessage = this.createChatBotMessage(\"抱歉，处理您的消息时出现了问题。请稍后再试。\", {\n          withAvatar: true\n        });\n        this.addMessageToBotState(errorMessage);\n      }\n    };\n\n    this.handleButtonsEmotion = (userID, sessionID, userInput, userInputType) => {\n      let inputToSend = userInput;\n      let message = this.createClientMessage(userInput);\n      this.addMessageToBotState(message); // Ignores input type above and manually defines; other cases will need an if check for this\n\n      let input_type = [\"positive\", \"neutral\", \"negative\"];\n      const dataToSend = {\n        user_id: userID,\n        session_id: sessionID,\n        user_choice: inputToSend,\n        input_type: input_type\n      };\n      this.sendRequest(dataToSend);\n    };\n\n    this.handleButtons = (userID, sessionID, userInput, userInputType) => {\n      let message = this.createClientMessage(userInput);\n      this.addMessageToBotState(message);\n      const dataToSend = {\n        user_id: userID,\n        session_id: sessionID,\n        user_choice: userInput,\n        input_type: userInputType\n      };\n      return this.sendRequest(dataToSend);\n    };\n\n    this.askForProtocol = () => {\n      let message = \"Please type a protocol number (1-20), using the workshops to help you.\";\n      this.addMessageToBotState(message);\n      this.setState(state => ({ ...state,\n        askingForProtocol: true\n      }));\n    };\n\n    this.stopAskingForProtocol = () => {\n      this.setState(state => ({ ...state,\n        askingForProtocol: false\n      }));\n    };\n\n    this.copyLastMessage = () => {\n      this.setState(state => ({ ...state,\n        messages: [...state.messages, state.messages[state.messages.length - 2]]\n      }));\n    };\n\n    this.handleInvalidInput = expectedOption => {\n      let feedbackMessage = \"感谢您的消息。我在这里倾听和支持您，请继续分享您的感受和想法。\"; // 在自由文本模式下提供通用的鼓励性反馈\n\n      const message = this.createChatBotMessage(feedbackMessage, {\n        withAvatar: true\n      });\n      this.addMessageToBotState(message);\n    };\n\n    this.addMessageToBotState = message => {\n      this.setState(state => ({ ...state,\n        messages: [...state.messages, message]\n      }));\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  } // Asks for password after storing username\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/ActionProvider.js"],"names":["axios","getEnvironment","ActionProvider","constructor","createChatBotMessage","setStateFunc","createClientMessage","askForPassword","username","setState","state","messages","withAvatar","addMessageToBotState","updateUserID","password","apiBaseUrl","process","env","REACT_APP_API_BASE_URL","window","location","hostname","protocol","uri","user_info","response","post","dataReceived","data","validID","message","model_prompt","userState","userID","inputType","choices","sessionID","delay","sendRequest","choice_info","console","log","handleReceivedData","errorMessage","error","chatbotResponse","chatbot_response","userOptions","user_options","options","emotion","isUltraThinkMode","ultraThinkMode","optionsToShow","length","Array","isArray","initialChoices","currentOptionToShow","responseWithEmotion","emotionEmoji","widget","i","message_to_add","fallbackMessage","handleButtonsEmotion","userInput","userInputType","inputToSend","input_type","dataToSend","user_id","session_id","user_choice","handleButtons","askForProtocol","askingForProtocol","stopAskingForProtocol","copyLastMessage","handleInvalidInput","expectedOption","feedbackMessage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,qBAA/B,C,CACA;;AACA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,YAAvB,EAAqCC,mBAArC,EAA0D;AAAA,SAQrEC,cARqE,GAQnDC,QAAD,IAAc;AAC7B,WAAKC,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBF,QAAAA,QAAQ,EAAEA;AAFc,OAAZ,CAAd;AAIA,YAAMG,QAAQ,GAAG,KAAKP,oBAAL,CACf,6BADe,EAEf;AACEQ,QAAAA,UAAU,EAAE;AADd,OAFe,CAAjB;AAOA,WAAKC,oBAAL,CAA0BF,QAA1B;AACD,KArBoE;;AAAA,SAwBrEG,YAxBqE,GAwBtD,OAAON,QAAP,EAAiBO,QAAjB,KAA8B;AAE3C,WAAKN,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBK,QAAAA,QAAQ,EAAEA;AAFc,OAAZ,CAAd,EAF2C,CAOzC;;AACF,YAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,KAAuCC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAA7B,GAA2C,uBAA3C,GAAsE,GAAEF,MAAM,CAACC,QAAP,CAAgBE,QAAS,KAAIH,MAAM,CAACC,QAAP,CAAgBC,QAAS,OAArK,CAAnB;AACA,YAAME,GAAG,GAAI,GAAER,UAAW,YAA1B;AACA,UAAIS,SAAS,GAAG;AACdjB,QAAAA,QAAQ,EAAEA,QADI;AAEdO,QAAAA,QAAQ,EAAEA;AAFI,OAAhB;AAKA,YAAMW,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAN,CAAWH,GAAX,EAAgB;AACrCC,QAAAA;AADqC,OAAhB,CAAvB,CAf2C,CAmB3C;;AACA,UAAIG,YAAY,GAAGF,QAAQ,CAACG,IAA5B;;AACA,UAAI,CAACD,YAAY,CAACE,OAAlB,EAA2B;AACzB,YAAIC,OAAO,GAAG,KAAK3B,oBAAL,CACZ,4EADY,EAEZ;AACEQ,UAAAA,UAAU,EAAE;AADd,SAFY,CAAd;AAKA,aAAKC,oBAAL,CAA0BkB,OAA1B,EANyB,CAOzB;AACA;AACA;AACA;AACA;;AACA,aAAKtB,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBF,UAAAA,QAAQ,EAAE,IAFc;AAGxBO,UAAAA,QAAQ,EAAE;AAHc,SAAZ,CAAd;AAMD,OAlBD,MAkBO;AACL,YAAIiB,YAAY,GAAGJ,YAAY,CAACI,YAAhC;AACA,aAAKvB,QAAL,CAAeC,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAYuB,UAAAA,SAAS,EAAEL,YAAY,CAACM,MAApC;AAA4CC,UAAAA,SAAS,EAAEP,YAAY,CAACQ,OAApE;AAA6EC,UAAAA,SAAS,EAAET,YAAY,CAACS;AAArG,SAAZ,CAAd;AACA,YAAIN,OAAO,GAAG,KAAK3B,oBAAL,CAA0B,2DAA1B,EAAuF;AACnGQ,UAAAA,UAAU,EAAE;AADuF,SAAvF,CAAd,CAHK,CAOL;;AACA,aAAKC,oBAAL,CAA0BkB,OAA1B;AACAA,QAAAA,OAAO,GAAG,KAAK3B,oBAAL,CAA0B4B,YAA1B,EAAwC;AAChDpB,UAAAA,UAAU,EAAE,IADoC;AAEhD0B,UAAAA,KAAK,EAAE;AAFyC,SAAxC,CAAV;AAIA,aAAKzB,oBAAL,CAA0BkB,OAA1B;AACD;AAEF,KA/EoE;;AAAA,SAkFrEQ,WAlFqE,GAkFvD,MAAOC,WAAP,IAAuB;AACnC,UAAI;AACF;AACA,cAAMxB,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,KAAuCC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAA7B,GAA2C,uBAA3C,GAAsE,GAAEF,MAAM,CAACC,QAAP,CAAgBE,QAAS,KAAIH,MAAM,CAACC,QAAP,CAAgBC,QAAS,OAArK,CAAnB;AACA,cAAME,GAAG,GAAI,GAAER,UAAW,qBAA1B;AAEAyB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmClB,GAAnC;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,WAA7B;AAEA,cAAMd,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAN,CAAWH,GAAX,EAAgB;AACrCgB,UAAAA;AADqC,SAAhB,CAAvB;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkChB,QAAQ,CAACG,IAA3C,EAZE,CAcF;;AACA,YAAIH,QAAQ,IAAIA,QAAQ,CAACG,IAAzB,EAA+B;AAC7B,eAAKc,kBAAL,CAAwBjB,QAAQ,CAACG,IAAjC;AACD,SAFD,MAEO;AACL;AACA,gBAAMe,YAAY,GAAG,KAAKxC,oBAAL,CACnB,uBADmB,EAEnB;AAAEQ,YAAAA,UAAU,EAAE;AAAd,WAFmB,CAArB;AAIA,eAAKC,oBAAL,CAA0B+B,YAA1B;AACD;AACF,OAzBD,CAyBE,OAAOC,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACI,KAAR,CAAc,qBAAd,EAAqCA,KAArC,EADc,CAGd;;AACA,cAAMD,YAAY,GAAG,KAAKxC,oBAAL,CACnB,uBADmB,EAEnB;AAAEQ,UAAAA,UAAU,EAAE;AAAd,SAFmB,CAArB;AAIA,aAAKC,oBAAL,CAA0B+B,YAA1B;AACD;AACF,KAtHoE;;AAAA,SAwHrED,kBAxHqE,GAwH/Cf,YAAD,IAAkB;AACrC,UAAI;AACF;AACA,YAAI,CAACA,YAAL,EAAmB;AACjBa,UAAAA,OAAO,CAACI,KAAR,CAAc,+BAAd;AACA,gBAAMD,YAAY,GAAG,KAAKxC,oBAAL,CACnB,sBADmB,EAEnB;AAAEQ,YAAAA,UAAU,EAAE;AAAd,WAFmB,CAArB;AAIA,eAAKC,oBAAL,CAA0B+B,YAA1B;AACA;AACD,SAVC,CAYF;;;AACA,cAAME,eAAe,GAAGlB,YAAY,CAACmB,gBAAb,IAAiCnB,YAAY,CAACF,QAA9C,IAA0D,iBAAlF;AACA,cAAMsB,WAAW,GAAGpB,YAAY,CAACqB,YAAb,IAA6BrB,YAAY,CAACsB,OAA1C,IAAqD,EAAzE;AACA,cAAMC,OAAO,GAAGvB,YAAY,CAACuB,OAAb,IAAwB,SAAxC;AAEAV,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC;AAAEI,UAAAA,eAAF;AAAmBE,UAAAA,WAAnB;AAAgCG,UAAAA;AAAhC,SAApC,EAjBE,CAmBF;;AACA,cAAMC,gBAAgB,GAAG,KAAK1C,KAAL,CAAW2C,cAApC;AAEA,YAAIC,aAAa,GAAG,IAApB,CAtBE,CAwBF;;AACA,YAAIF,gBAAJ,EAAsB;AACpB;AACA,cAAIJ,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,WAAnD,EAAgE;AAC9DM,YAAAA,aAAa,GAAG,IAAhB;AACD,WAFD,MAEO,IAAIN,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,KAA/C,IAAwDA,WAAW,CAAC,CAAD,CAAX,KAAmB,IAA/E,EAAqF;AAC1FM,YAAAA,aAAa,GAAG,OAAhB,CAD0F,CACjE;AAC1B,WAFM,MAEA;AACLA,YAAAA,aAAa,GAAG,IAAhB,CADK,CACiB;AACvB;AACF,SATD,MASO;AACL;AACA,cAAIE,KAAK,CAACC,OAAN,CAAcT,WAAd,CAAJ,EAAgC;AAC9B,gBAAIA,WAAW,CAACO,MAAZ,KAAuB,CAAvB,KAA6BP,WAAW,CAAC,CAAD,CAAX,KAAmB,WAAnB,IAAkCA,WAAW,CAAC,CAAD,CAAX,KAAmB,KAAlF,CAAJ,EAA8F;AAC5FM,cAAAA,aAAa,GAAG,IAAhB;AACD,aAFD,MAEO,IAAIN,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,UAAnD,EAA+D;AACpEM,cAAAA,aAAa,GAAG,UAAhB;AACD,aAFM,MAEA,IAAIN,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,KAA/C,IAAwDA,WAAW,CAAC,CAAD,CAAX,KAAmB,IAA/E,EAAqF;AAC1FM,cAAAA,aAAa,GAAG,OAAhB;AACD,aAFM,MAEA,IAAIN,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,QAA/C,IAA2DA,WAAW,CAAC,CAAD,CAAX,KAAmB,SAAlF,EAA6F;AAClGM,cAAAA,aAAa,GAAG,eAAhB;AACD,aAFM,MAEA,IAAIN,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,UAA/C,IAA6DA,WAAW,CAAC,CAAD,CAAX,KAAmB,SAAhF,IAA6FA,WAAW,CAAC,CAAD,CAAX,KAAmB,UAApH,EAAgI;AACrIM,cAAAA,aAAa,GAAG,SAAhB;AACD,aAFM,MAEA,IAAIN,WAAW,CAACO,MAAZ,KAAuB,CAAvB,IAA4BP,WAAW,CAAC,CAAD,CAAX,KAAmB,QAA/C,IAA2DA,WAAW,CAAC,CAAD,CAAX,KAAmB,OAA9E,IAAyFA,WAAW,CAAC,CAAD,CAAX,KAAmB,WAAhH,EAA6H;AAClIM,cAAAA,aAAa,GAAG,UAAhB;AACD,aAFM,MAEA,IAAIN,WAAW,CAACO,MAAZ,GAAqB,CAAzB,EAA4B;AACjCD,cAAAA,aAAa,GAAG,gBAAhB;AACA,mBAAK7C,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBgD,gBAAAA,cAAc,EAAEV,WAFQ;AAGxBb,gBAAAA,SAAS,EAAEa;AAHa,eAAZ,CAAd;AAKD;AACF;AACF;;AAED,aAAKvC,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBiD,UAAAA,mBAAmB,EAAEL;AAFG,SAAZ,CAAd,EA5DE,CAiEF;;AACA,YAAIM,mBAAmB,GAAGd,eAA1B;;AACA,YAAIM,gBAAgB,IAAID,OAAO,KAAK,SAApC,EAA+C;AAC7C,gBAAMU,YAAY,GAAG;AACnB,qBAAS,IADU;AAEnB,mBAAO,IAFY;AAGnB,qBAAS,IAHU;AAInB,uBAAW,IAJQ;AAKnB,uBAAW;AALQ,WAArB;AAOAD,UAAAA,mBAAmB,GAAI,GAAEC,YAAY,CAACV,OAAD,CAAZ,IAAyB,EAAG,IAAGL,eAAgB,EAAxE;AACD,SA5EC,CA8EF;;;AACA,YAAI,OAAOc,mBAAP,KAA+B,QAAnC,EAA6C;AAC3C,gBAAMjD,QAAQ,GAAG,KAAKP,oBAAL,CAA0BwD,mBAA1B,EAA+C;AAC9DhD,YAAAA,UAAU,EAAE,IADkD;AAE9DkD,YAAAA,MAAM,EAAER;AAFsD,WAA/C,CAAjB;AAIA,eAAKzC,oBAAL,CAA0BF,QAA1B;AACD,SAND,MAMO,IAAI6C,KAAK,CAACC,OAAN,CAAcG,mBAAd,CAAJ,EAAwC;AAC7C,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,mBAAmB,CAACL,MAAxC,EAAgDQ,CAAC,EAAjD,EAAqD;AACnD,gBAAID,MAAM,GAAG,IAAb,CADmD,CAEnD;;AACA,gBAAIC,CAAC,KAAKH,mBAAmB,CAACL,MAApB,GAA6B,CAAvC,EAA0C;AACxCO,cAAAA,MAAM,GAAGR,aAAT;AACD;;AACD,kBAAMU,cAAc,GAAG,KAAK5D,oBAAL,CAA0BwD,mBAAmB,CAACG,CAAD,CAA7C,EAAkD;AACvEnD,cAAAA,UAAU,EAAE,IAD2D;AAEvEkD,cAAAA,MAAM,EAAEA,MAF+D;AAGvExB,cAAAA,KAAK,EAAGyB,CAAD,GAAI;AAH4D,aAAlD,CAAvB;AAKA,iBAAKlD,oBAAL,CAA0BmD,cAA1B;AACD;AACF,SAdM,MAcA;AACL;AACA,gBAAMC,eAAe,GAAG,KAAK7D,oBAAL,CACtB,8BADsB,EAEtB;AAAEQ,YAAAA,UAAU,EAAE,IAAd;AAAoBkD,YAAAA,MAAM,EAAER;AAA5B,WAFsB,CAAxB;AAIA,eAAKzC,oBAAL,CAA0BoD,eAA1B;AACD;AACF,OA3GD,CA2GE,OAAOpB,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACI,KAAR,CAAc,+BAAd,EAA+CA,KAA/C;AACA,cAAMD,YAAY,GAAG,KAAKxC,oBAAL,CACnB,wBADmB,EAEnB;AAAEQ,UAAAA,UAAU,EAAE;AAAd,SAFmB,CAArB;AAIA,aAAKC,oBAAL,CAA0B+B,YAA1B;AACD;AACF,KA5OoE;;AAAA,SA8OrEsB,oBA9OqE,GA8O9C,CAAChC,MAAD,EAASG,SAAT,EAAoB8B,SAApB,EAA+BC,aAA/B,KAAiD;AACtE,UAAIC,WAAW,GAAGF,SAAlB;AACA,UAAIpC,OAAO,GAAG,KAAKzB,mBAAL,CAAyB6D,SAAzB,CAAd;AACA,WAAKtD,oBAAL,CAA0BkB,OAA1B,EAHsE,CAMtE;;AACA,UAAIuC,UAAU,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,UAAxB,CAAjB;AACA,YAAMC,UAAU,GAAG;AACjBC,QAAAA,OAAO,EAAEtC,MADQ;AAEjBuC,QAAAA,UAAU,EAAEpC,SAFK;AAGjBqC,QAAAA,WAAW,EAAEL,WAHI;AAIjBC,QAAAA,UAAU,EAAEA;AAJK,OAAnB;AAMA,WAAK/B,WAAL,CAAiBgC,UAAjB;AACD,KA7PoE;;AAAA,SA+PrEI,aA/PqE,GA+PrD,CAACzC,MAAD,EAASG,SAAT,EAAoB8B,SAApB,EAA+BC,aAA/B,KAAiD;AAC/D,UAAIrC,OAAO,GAAG,KAAKzB,mBAAL,CAAyB6D,SAAzB,CAAd;AACA,WAAKtD,oBAAL,CAA0BkB,OAA1B;AAEA,YAAMwC,UAAU,GAAG;AACjBC,QAAAA,OAAO,EAAEtC,MADQ;AAEjBuC,QAAAA,UAAU,EAAEpC,SAFK;AAGjBqC,QAAAA,WAAW,EAAEP,SAHI;AAIjBG,QAAAA,UAAU,EAAEF;AAJK,OAAnB;AAMA,aAAO,KAAK7B,WAAL,CAAiBgC,UAAjB,CAAP;AACD,KA1QoE;;AAAA,SA4QrEK,cA5QqE,GA4QpD,MAAM;AACrB,UAAI7C,OAAO,GAAG,wEAAd;AACA,WAAKlB,oBAAL,CAA0BkB,OAA1B;AACA,WAAKtB,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBmE,QAAAA,iBAAiB,EAAE;AAFK,OAAZ,CAAd;AAID,KAnRoE;;AAAA,SAqRrEC,qBArRqE,GAqR7C,MAAM;AAC5B,WAAKrE,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBmE,QAAAA,iBAAiB,EAAE;AAFK,OAAZ,CAAd;AAID,KA1RoE;;AAAA,SA8RrEE,eA9RqE,GA8RnD,MAAM;AACtB,WAAKtE,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,EAAoBD,KAAK,CAACC,QAAN,CAAeD,KAAK,CAACC,QAAN,CAAe4C,MAAf,GAAwB,CAAvC,CAApB;AAFc,OAAZ,CAAd;AAID,KAnSoE;;AAAA,SAsSrEyB,kBAtSqE,GAsS/CC,cAAD,IAAoB;AACvC,UAAIC,eAAe,GAAG,iCAAtB,CADuC,CAGvC;;AACA,YAAMnD,OAAO,GAAG,KAAK3B,oBAAL,CAA0B8E,eAA1B,EAA2C;AACzDtE,QAAAA,UAAU,EAAE;AAD6C,OAA3C,CAAhB;AAIA,WAAKC,oBAAL,CAA0BkB,OAA1B;AACD,KA/SoE;;AAAA,SAmTrElB,oBAnTqE,GAmT7CkB,OAAD,IAAa;AAClC,WAAKtB,QAAL,CAAeC,KAAD,KAAY,EACxB,GAAGA,KADqB;AAExBC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,EAAoBoB,OAApB;AAFc,OAAZ,CAAd;AAID,KAxToE;;AACnE,SAAK3B,oBAAL,GAA4BA,oBAA5B;AACA,SAAKK,QAAL,GAAgBJ,YAAhB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACD,GALkB,CAQnB;;;AARmB;;AA4TrB,eAAeJ,cAAf","sourcesContent":["import axios from 'axios';\nimport { getEnvironment } from './utils/environment';\n// ActionProvider starter code\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n\n  // Asks for password after storing username\n  askForPassword = (username) => {\n    this.setState((state) => ({\n      ...state,\n      username: username,\n    }));\n    const messages = this.createChatBotMessage(\n      \"Please enter your password:\",\n      {\n        withAvatar: true,\n      }\n    );\n\n    this.addMessageToBotState(messages);\n  }\n\n  // Checking for ID with a request\n  updateUserID = async (username, password) => {\n\n    this.setState((state) => ({\n      ...state,\n      password: password,\n    }));\n\n      // Get API base URL from environment or use default\n    const apiBaseUrl = process.env.REACT_APP_API_BASE_URL || (window.location.hostname === 'localhost' ? 'http://localhost:5001' : `${window.location.protocol}//${window.location.hostname}:5001`);\n    const uri = `${apiBaseUrl}/api/login`\n    let user_info = {\n      username: username,\n      password: password\n    };\n\n    const response = await axios.post(uri, {\n      user_info\n    })\n\n    // dataReceived format: {validID : bool, userID: string}\n    let dataReceived = response.data\n    if (!dataReceived.validID) {\n      let message = this.createChatBotMessage(\n        \"The ID and password combination is not valid, sorry. What is your user ID?\",\n        {\n          withAvatar: true,\n        });\n      this.addMessageToBotState(message);\n      // let user_id_message = this.createChatBotMessage(\"What is your user ID?\",\n      //   { withAvatar: true,\n      //     delay: 1500 }\n      // );\n      // this.addMessageToBotState(user_id_message)\n      this.setState((state) => ({\n        ...state,\n        username: null,\n        password: null\n      }));\n\n    } else {\n      let model_prompt = dataReceived.model_prompt\n      this.setState((state) => ({ ...state, userState: dataReceived.userID, inputType: dataReceived.choices, sessionID: dataReceived.sessionID }));\n      let message = this.createChatBotMessage(\"The user ID and password combination is valid, thank you!\", {\n        withAvatar: true,\n      });\n\n      // Opening prompt -> open text\n      this.addMessageToBotState(message);\n      message = this.createChatBotMessage(model_prompt, {\n        withAvatar: true,\n        delay: 1500,\n      });\n      this.addMessageToBotState(message);\n    }\n\n  };\n\n  // Send API request\n  sendRequest = async (choice_info) => {\n    try {\n      // Get API base URL from environment or use default\n      const apiBaseUrl = process.env.REACT_APP_API_BASE_URL || (window.location.hostname === 'localhost' ? 'http://localhost:5001' : `${window.location.protocol}//${window.location.hostname}:5001`);\n      const uri = `${apiBaseUrl}/api/update_session`;\n      \n      console.log(\"Sending request to:\", uri);\n      console.log(\"Request data:\", choice_info);\n      \n      const response = await axios.post(uri, {\n        choice_info\n      });\n\n      console.log(\"Received response:\", response.data);\n      \n      // Check if response is valid\n      if (response && response.data) {\n        this.handleReceivedData(response.data);\n      } else {\n        // Handle empty or invalid response\n        const errorMessage = this.createChatBotMessage(\n          \"抱歉，我暂时无法处理您的请求。请稍后再试。\",\n          { withAvatar: true }\n        );\n        this.addMessageToBotState(errorMessage);\n      }\n    } catch (error) {\n      console.error(\"API request failed:\", error);\n      \n      // 提供友好的错误消息给用户\n      const errorMessage = this.createChatBotMessage(\n        \"抱歉，我暂时无法处理您的请求。请稍后再试。\",\n        { withAvatar: true }\n      );\n      this.addMessageToBotState(errorMessage);\n    }\n  };\n\n  handleReceivedData = (dataReceived) => {\n    try {\n      // Validate data received\n      if (!dataReceived) {\n        console.error(\"No data received from backend\");\n        const errorMessage = this.createChatBotMessage(\n          \"抱歉，我没有收到有效的响应。请稍后再试。\",\n          { withAvatar: true }\n        );\n        this.addMessageToBotState(errorMessage);\n        return;\n      }\n\n      // Extract response and options with fallbacks\n      const chatbotResponse = dataReceived.chatbot_response || dataReceived.response || \"感谢您的消息。我在这里支持您。\";\n      const userOptions = dataReceived.user_options || dataReceived.options || [];\n      const emotion = dataReceived.emotion || \"neutral\";\n      \n      console.log(\"Processing response:\", { chatbotResponse, userOptions, emotion });\n\n      // Check if UltraThink mode is enabled\n      const isUltraThinkMode = this.state.ultraThinkMode;\n      \n      let optionsToShow = null;\n      \n      // In UltraThink mode, minimize options and encourage natural conversation\n      if (isUltraThinkMode) {\n        // Only show options for critical situations or when specifically needed\n        if (userOptions.length === 1 && userOptions[0] === \"open_text\") {\n          optionsToShow = null;\n        } else if (userOptions.length === 2 && userOptions[0] === \"yes\" && userOptions[1] === \"no\") {\n          optionsToShow = \"YesNo\"; // Keep yes/no for important decisions\n        } else {\n          optionsToShow = null; // Hide most options in UltraThink mode\n        }\n      } else {\n        // Normal mode - show options as before\n        if (Array.isArray(userOptions)) {\n          if (userOptions.length === 1 && (userOptions[0] === \"open_text\" || userOptions[0] === \"any\")) {\n            optionsToShow = null;\n          } else if (userOptions.length === 1 && userOptions[0] === \"continue\") {\n            optionsToShow = \"Continue\";\n          } else if (userOptions.length === 2 && userOptions[0] === \"yes\" && userOptions[1] === \"no\") {\n            optionsToShow = \"YesNo\";\n          } else if (userOptions.length === 2 && userOptions[0] === \"recent\" && userOptions[1] === \"distant\") {\n            optionsToShow = \"RecentDistant\";\n          } else if (userOptions.length === 3 && userOptions[0] === \"positive\" && userOptions[1] === \"neutral\" && userOptions[2] === \"negative\") {\n            optionsToShow = \"Emotion\";\n          } else if (userOptions.length === 3 && userOptions[0] === \"better\" && userOptions[1] === \"worse\" && userOptions[2] === \"no change\") {\n            optionsToShow = \"Feedback\";\n          } else if (userOptions.length > 0) {\n            optionsToShow = \"InitialOptions\";\n            this.setState((state) => ({\n              ...state,\n              initialChoices: userOptions,\n              inputType: userOptions\n            }));\n          }\n        }\n      }\n\n      this.setState((state) => ({\n        ...state,\n        currentOptionToShow: optionsToShow,\n      }));\n\n      // Add emotion indicator if in UltraThink mode\n      let responseWithEmotion = chatbotResponse;\n      if (isUltraThinkMode && emotion !== \"neutral\") {\n        const emotionEmoji = {\n          \"happy\": \"😊\",\n          \"sad\": \"😢\",\n          \"angry\": \"😠\",\n          \"anxious\": \"😰\",\n          \"neutral\": \"\"\n        };\n        responseWithEmotion = `${emotionEmoji[emotion] || \"\"} ${chatbotResponse}`;\n      }\n\n      // Handle responses - either strings or list of strings\n      if (typeof responseWithEmotion === \"string\") {\n        const messages = this.createChatBotMessage(responseWithEmotion, {\n          withAvatar: true,\n          widget: optionsToShow,\n        });\n        this.addMessageToBotState(messages);\n      } else if (Array.isArray(responseWithEmotion)) {\n        for (let i = 0; i < responseWithEmotion.length; i++) {\n          let widget = null;\n          // Shows options after last message\n          if (i === responseWithEmotion.length - 1) {\n            widget = optionsToShow;\n          }\n          const message_to_add = this.createChatBotMessage(responseWithEmotion[i], {\n            withAvatar: true,\n            widget: widget,\n            delay: (i)*1500,\n          });\n          this.addMessageToBotState(message_to_add);\n        }\n      } else {\n        // Fallback for unexpected response format\n        const fallbackMessage = this.createChatBotMessage(\n          \"感谢您的消息。我在这里支持您。请告诉我更多关于您的感受。\",\n          { withAvatar: true, widget: optionsToShow }\n        );\n        this.addMessageToBotState(fallbackMessage);\n      }\n    } catch (error) {\n      console.error(\"Error handling received data:\", error);\n      const errorMessage = this.createChatBotMessage(\n        \"抱歉，处理您的消息时出现了问题。请稍后再试。\",\n        { withAvatar: true }\n      );\n      this.addMessageToBotState(errorMessage);\n    }\n  };\n\n  handleButtonsEmotion = (userID, sessionID, userInput, userInputType) => {\n    let inputToSend = userInput;\n    let message = this.createClientMessage(userInput);\n    this.addMessageToBotState(message);\n\n\n    // Ignores input type above and manually defines; other cases will need an if check for this\n    let input_type = [\"positive\", \"neutral\", \"negative\"]\n    const dataToSend = {\n      user_id: userID,\n      session_id: sessionID,\n      user_choice: inputToSend,\n      input_type: input_type,\n    };\n    this.sendRequest(dataToSend);\n  }\n\n  handleButtons = (userID, sessionID, userInput, userInputType) => {\n    let message = this.createClientMessage(userInput);\n    this.addMessageToBotState(message);\n\n    const dataToSend = {\n      user_id: userID,\n      session_id: sessionID,\n      user_choice: userInput,\n      input_type: userInputType,\n    };\n    return this.sendRequest(dataToSend);\n  };\n\n  askForProtocol = () => {\n    let message = \"Please type a protocol number (1-20), using the workshops to help you.\"\n    this.addMessageToBotState(message);\n    this.setState((state) => ({\n      ...state,\n      askingForProtocol: true,\n    }))\n  }\n\n  stopAskingForProtocol = () => {\n    this.setState((state) => ({\n      ...state,\n      askingForProtocol: false,\n    }))\n  }\n\n\n  // Copies last message from model - kept for backward compatibility but should use handleInvalidInput instead\n  copyLastMessage = () => {\n    this.setState((state) => ({\n      ...state,\n      messages: [...state.messages, state.messages[state.messages.length - 2]],\n    }))\n  }\n  \n  // Handles invalid user input by providing helpful feedback\n  handleInvalidInput = (expectedOption) => {\n    let feedbackMessage = \"感谢您的消息。我在这里倾听和支持您，请继续分享您的感受和想法。\";\n    \n    // 在自由文本模式下提供通用的鼓励性反馈\n    const message = this.createChatBotMessage(feedbackMessage, {\n      withAvatar: true,\n    });\n    \n    this.addMessageToBotState(message);\n  }\n\n\n  // Add message to state\n  addMessageToBotState = (message) => {\n    this.setState((state) => ({\n      ...state,\n      messages: [...state.messages, message],\n    }));\n  };\n}\n\nexport default ActionProvider;\n"]},"metadata":{},"sourceType":"module"}