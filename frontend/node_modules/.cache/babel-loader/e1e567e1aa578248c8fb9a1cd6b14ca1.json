{"ast":null,"code":"var _jsxFileName = \"/Users/liuyanjun/therapy_agent/frontend/src/config.js\";\n// Config starter code\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport YesNoOptions from \"./widgets/options/GeneralOptions/YesNoOptions\";\nimport ProtocolOptions from \"./widgets/options/GeneralOptions/ProtocolOptions\";\nimport ContinueOptions from \"./widgets/options/GeneralOptions/ContinueOptions\";\nimport FeedbackOptions from \"./widgets/options/GeneralOptions/FeedbackOptions\";\nimport EmotionOptions from \"./widgets/options/GeneralOptions/EmotionOptions\";\nimport EventOptions from \"./widgets/options/GeneralOptions/EventOptions\";\nimport YesNoProtocolOptions from \"./widgets/options/GeneralOptions/YesNoProtocolsOptions\"; // import Kai from \"./Kai.png\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst botName = \"MindGuide\"; // export const getPersona = () => {\n//   return <img src={Kai} width=\"50\" height=\"50\" alt=\"\"/>;\n// };\n\nconst config = {\n  botName: botName,\n  initialMessages: [createChatBotMessage(\"Hi, I am MindGuide, welcome to today's session.\", {\n    withAvatar: true,\n    delay: 0\n  }), createChatBotMessage(\"Before we begin, I just need you to go through authentication.\", {\n    withAvatar: true,\n    delay: 1500\n  }), createChatBotMessage(\"Please enter your username:\", {\n    withAvatar: true,\n    delay: 3000\n  })],\n  state: {\n    userState: null,\n    username: null,\n    password: null,\n    sessionID: null,\n    protocols: [],\n    askingForProtocol: false\n  },\n  customComponents: {\n    header: () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '15px',\n        fontFamily: 'Trebuchet MS',\n        fontSize: \"1em\",\n        textAlign: \"center\",\n        color: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      },\n      children: \"MindGuide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }, this) // botAvatar: (props) => <div class=\"react-chatbot-kit-chat-bot-avatar-container\" style={{fontFamily: 'Arial'}}>\n    //   {getPersona()} </div>\n\n  },\n  widgets: [{\n    widgetName: \"YesNo\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(YesNoOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\"]\n  }, {\n    widgetName: \"Continue\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(ContinueOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\"]\n  }, {\n    widgetName: \"Emotion\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(EmotionOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\"]\n  }, {\n    widgetName: \"Feedback\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(FeedbackOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\"]\n  }, {\n    widgetName: \"Protocol\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(ProtocolOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\", \"protocols\", \"askingForProtocol\"]\n  }, {\n    widgetName: \"YesNoProtocols\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(YesNoProtocolOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\"]\n  }, {\n    widgetName: \"RecentDistant\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(EventOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 30\n    }, this),\n    mapStateToProps: [\"userState\", \"sessionID\"]\n  }]\n};\nexport default config;","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/config.js"],"names":["React","createChatBotMessage","YesNoOptions","ProtocolOptions","ContinueOptions","FeedbackOptions","EmotionOptions","EventOptions","YesNoProtocolOptions","botName","config","initialMessages","withAvatar","delay","state","userState","username","password","sessionID","protocols","askingForProtocol","customComponents","header","height","fontFamily","fontSize","textAlign","color","paddingTop","paddingBottom","widgets","widgetName","widgetFunc","props","mapStateToProps"],"mappings":"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","sourcesContent":["// Config starter code\r\nimport React from \"react\";\r\nimport { createChatBotMessage } from \"react-chatbot-kit\";\r\n\r\nimport YesNoOptions from \"./widgets/options/GeneralOptions/YesNoOptions\";\r\nimport ProtocolOptions from \"./widgets/options/GeneralOptions/ProtocolOptions\";\r\nimport ContinueOptions from \"./widgets/options/GeneralOptions/ContinueOptions\";\r\nimport FeedbackOptions from \"./widgets/options/GeneralOptions/FeedbackOptions\";\r\nimport EmotionOptions from \"./widgets/options/GeneralOptions/EmotionOptions\";\r\nimport EventOptions from \"./widgets/options/GeneralOptions/EventOptions\";\r\nimport YesNoProtocolOptions from \"./widgets/options/GeneralOptions/YesNoProtocolsOptions\";\r\n\r\n// import Kai from \"./Kai.png\"\r\n\r\nconst botName = \"MindGuide\";\r\n\r\n// export const getPersona = () => {\r\n\r\n//   return <img src={Kai} width=\"50\" height=\"50\" alt=\"\"/>;\r\n\r\n// };\r\n\r\n\r\nconst config = {\r\n  botName: botName,\r\n  initialMessages: [\r\n    createChatBotMessage(\"Hi, I am MindGuide, welcome to today's session.\", {\r\n      withAvatar: true,\r\n      delay: 0,\r\n    }),\r\n    createChatBotMessage(\"Before we begin, I just need you to go through authentication.\", {\r\n      withAvatar: true,\r\n      delay: 1500,\r\n    }),\r\n    createChatBotMessage(\"Please enter your username:\", {\r\n      withAvatar: true,\r\n      delay: 3000,\r\n    }),\r\n  ],\r\n\r\n  state: {\r\n    userState: null,\r\n    username: null,\r\n    password: null,\r\n    sessionID: null,\r\n    protocols: [],\r\n    askingForProtocol: false\r\n  },\r\n\r\n  customComponents: {\r\n    header: () => <div style={{height: '15px', fontFamily: 'Trebuchet MS', fontSize: \"1em\", textAlign: \"center\", color: '#fff', paddingTop: '1em', paddingBottom: '1em'}}>MindGuide</div>,\r\n    // botAvatar: (props) => <div class=\"react-chatbot-kit-chat-bot-avatar-container\" style={{fontFamily: 'Arial'}}>\r\n    //   {getPersona()} </div>\r\n    },\r\n\r\n  widgets: [\r\n    {\r\n      widgetName: \"YesNo\",\r\n      widgetFunc: (props) => <YesNoOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\"],\r\n    },\r\n    {\r\n      widgetName: \"Continue\",\r\n      widgetFunc: (props) => <ContinueOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\"],\r\n    },\r\n    {\r\n      widgetName: \"Emotion\",\r\n      widgetFunc: (props) => <EmotionOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\"],\r\n    },\r\n    {\r\n      widgetName: \"Feedback\",\r\n      widgetFunc: (props) => <FeedbackOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\"],\r\n    },\r\n    {\r\n      widgetName: \"Protocol\",\r\n      widgetFunc: (props) => <ProtocolOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\", \"protocols\", \"askingForProtocol\"],\r\n    },\r\n    {\r\n      widgetName: \"YesNoProtocols\",\r\n      widgetFunc: (props) => <YesNoProtocolOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\"],\r\n    },\r\n    {\r\n      widgetName: \"RecentDistant\",\r\n      widgetFunc: (props) => <EventOptions {...props} />,\r\n      mapStateToProps: [\"userState\", \"sessionID\"],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default config;\r\n"]},"metadata":{},"sourceType":"module"}