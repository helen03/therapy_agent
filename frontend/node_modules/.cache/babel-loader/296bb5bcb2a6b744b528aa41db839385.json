{"ast":null,"code":"var _jsxFileName = \"/Users/liuyanjun/therapy_agent/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Chatbot } from \"react-chatbot-kit\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport \"./App.css\";\nimport MessageParser from \"./MessageParser\";\nimport ActionProvider from \"./ActionProvider\";\nimport config from \"./config\";\nimport Login from \"./LoginSimple\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showTools, setShowTools] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n  const [chatConfig, setChatConfig] = useState(config);\n\n  const handleLogin = userData => {\n    setUserInfo(userData);\n    setIsLoggedIn(true); // Create initial messages using the backend response\n\n    const initialMessages = [createChatBotMessage(`Hi ${userData.username}, welcome to today's therapy session!`, {\n      withAvatar: true,\n      delay: 0\n    })]; // Add the model prompt from backend if available\n\n    if (userData.model_prompt) {\n      initialMessages.push(createChatBotMessage(userData.model_prompt, {\n        withAvatar: true,\n        delay: 1500,\n        widget: userData.choices && userData.choices.length > 0 ? \"InitialOptions\" : null\n      }));\n    } else {\n      initialMessages.push(createChatBotMessage(\"I'm here to help you with your emotional well-being. Let's begin our session.\", {\n        withAvatar: true,\n        delay: 1500\n      }));\n    } // Update config with user info and initial messages\n\n\n    const updatedConfig = { ...config,\n      initialMessages: initialMessages,\n      state: { ...config.state,\n        userState: userData.userID,\n        sessionID: userData.sessionID,\n        username: userData.username,\n        // Store the initial choices from backend\n        initialChoices: userData.choices || []\n      }\n    };\n    setChatConfig(updatedConfig);\n  };\n\n  const handleRegister = userData => {\n    setUserInfo(userData);\n    setIsLoggedIn(true); // Create welcome messages for new user\n\n    const welcomeMessages = [createChatBotMessage(`Welcome to MindGuide, ${userData.username}!`, {\n      withAvatar: true,\n      delay: 0\n    }), createChatBotMessage(\"I'm glad you're here. Let's start your first therapy session together.\", {\n      withAvatar: true,\n      delay: 1500\n    })]; // Update config with user info and welcome messages\n\n    const updatedConfig = { ...config,\n      initialMessages: welcomeMessages,\n      state: { ...config.state,\n        userState: userData.userID,\n        sessionID: userData.sessionID,\n        username: userData.username\n      }\n    };\n    setChatConfig(updatedConfig);\n  };\n\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setUserInfo(null);\n    setChatConfig(config); // Reset to original config\n  };\n\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin,\n      onRegister: handleRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"MindGuide Therapy Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-info\",\n          children: [\"\\u6B22\\u8FCE, \", userInfo === null || userInfo === void 0 ? void 0 : userInfo.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"tools-toggle\",\n          onClick: () => setShowTools(!showTools),\n          children: showTools ? '隐藏工具' : '显示工具'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-btn\",\n          onClick: handleLogout,\n          children: \"\\u9000\\u51FA\\u767B\\u5F55\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-content\",\n      children: [showTools && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tools-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u6CBB\\u7597\\u5DE5\\u5177\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\u60C5\\u7EEA\\u8C03\\u8282\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tool-btn\",\n            children: \"\\u547C\\u5438\\u7EC3\\u4E60\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tool-btn\",\n            children: \"\\u6B63\\u5FF5\\u51A5\\u60F3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tool-btn\",\n            children: \"\\u60C5\\u7EEA\\u65E5\\u8BB0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\u81EA\\u52A9\\u8D44\\u6E90\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tool-btn\",\n            children: \"\\u5E94\\u5BF9\\u7B56\\u7565\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tool-btn\",\n            children: \"\\u653E\\u677E\\u6280\\u5DE7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"tool-btn\",\n            children: \"\\u5FC3\\u7406\\u6559\\u80B2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-container ${showTools ? 'with-tools' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(Chatbot, {\n          config: chatConfig,\n          messageParser: MessageParser,\n          actionProvider: ActionProvider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"N25UO7seZwu+/yqrswPLio1hmpk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/App.js"],"names":["React","useState","useEffect","Chatbot","createChatBotMessage","MessageParser","ActionProvider","config","Login","App","showTools","setShowTools","isLoggedIn","setIsLoggedIn","userInfo","setUserInfo","chatConfig","setChatConfig","handleLogin","userData","initialMessages","username","withAvatar","delay","model_prompt","push","widget","choices","length","updatedConfig","state","userState","userID","sessionID","initialChoices","handleRegister","welcomeMessages","handleLogout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Chatbot } from \"react-chatbot-kit\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport \"./App.css\";\nimport MessageParser from \"./MessageParser\";\nimport ActionProvider from \"./ActionProvider\";\nimport config from \"./config\";\nimport Login from \"./LoginSimple\";\n\nconst App = () => {\n  const [showTools, setShowTools] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n  const [chatConfig, setChatConfig] = useState(config);\n\n  const handleLogin = (userData) => {\n    setUserInfo(userData);\n    setIsLoggedIn(true);\n    \n    // Create initial messages using the backend response\n    const initialMessages = [\n      createChatBotMessage(`Hi ${userData.username}, welcome to today's therapy session!`, {\n        withAvatar: true,\n        delay: 0,\n      }),\n    ];\n    \n    // Add the model prompt from backend if available\n    if (userData.model_prompt) {\n      initialMessages.push(\n        createChatBotMessage(userData.model_prompt, {\n          withAvatar: true,\n          delay: 1500,\n          widget: userData.choices && userData.choices.length > 0 ? \"InitialOptions\" : null,\n        })\n      );\n    } else {\n      initialMessages.push(\n        createChatBotMessage(\"I'm here to help you with your emotional well-being. Let's begin our session.\", {\n          withAvatar: true,\n          delay: 1500,\n        })\n      );\n    }\n    \n    // Update config with user info and initial messages\n    const updatedConfig = {\n      ...config,\n      initialMessages: initialMessages,\n      state: {\n        ...config.state,\n        userState: userData.userID,\n        sessionID: userData.sessionID,\n        username: userData.username,\n        // Store the initial choices from backend\n        initialChoices: userData.choices || []\n      }\n    };\n    \n    setChatConfig(updatedConfig);\n  };\n\n  const handleRegister = (userData) => {\n    setUserInfo(userData);\n    setIsLoggedIn(true);\n    \n    // Create welcome messages for new user\n    const welcomeMessages = [\n      createChatBotMessage(`Welcome to MindGuide, ${userData.username}!`, {\n        withAvatar: true,\n        delay: 0,\n      }),\n      createChatBotMessage(\"I'm glad you're here. Let's start your first therapy session together.\", {\n        withAvatar: true,\n        delay: 1500,\n      }),\n    ];\n    \n    // Update config with user info and welcome messages\n    const updatedConfig = {\n      ...config,\n      initialMessages: welcomeMessages,\n      state: {\n        ...config.state,\n        userState: userData.userID,\n        sessionID: userData.sessionID,\n        username: userData.username,\n      }\n    };\n    \n    setChatConfig(updatedConfig);\n  };\n\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setUserInfo(null);\n    setChatConfig(config); // Reset to original config\n  };\n\n  if (!isLoggedIn) {\n    return <Login onLogin={handleLogin} onRegister={handleRegister} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-header\">\n        <h1>MindGuide Therapy Assistant</h1>\n        <div className=\"header-controls\">\n          <span className=\"user-info\">欢迎, {userInfo?.username}</span>\n          <button \n            className=\"tools-toggle\"\n            onClick={() => setShowTools(!showTools)}\n          >\n            {showTools ? '隐藏工具' : '显示工具'}\n          </button>\n          <button \n            className=\"logout-btn\"\n            onClick={handleLogout}\n          >\n            退出登录\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"app-content\">\n        {showTools && (\n          <div className=\"tools-sidebar\">\n            <h3>治疗工具</h3>\n            <div className=\"tool-section\">\n              <h4>情绪调节</h4>\n              <button className=\"tool-btn\">呼吸练习</button>\n              <button className=\"tool-btn\">正念冥想</button>\n              <button className=\"tool-btn\">情绪日记</button>\n            </div>\n            <div className=\"tool-section\">\n              <h4>自助资源</h4>\n              <button className=\"tool-btn\">应对策略</button>\n              <button className=\"tool-btn\">放松技巧</button>\n              <button className=\"tool-btn\">心理教育</button>\n            </div>\n          </div>\n        )}\n        \n        <div className={`chat-container ${showTools ? 'with-tools' : ''}`}>\n          <Chatbot\n            config={chatConfig}\n            messageParser={MessageParser}\n            actionProvider={ActionProvider}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}