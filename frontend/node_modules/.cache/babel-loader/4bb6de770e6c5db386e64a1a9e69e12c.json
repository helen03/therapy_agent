{"ast":null,"code":"var _jsxFileName = \"/Users/liuyanjun/therapy_agent/frontend/src/components/ParticleBackground.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ParticleBackground = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d'); // 设置画布尺寸\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas); // 粒子类\n\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 3 + 1;\n        this.speedX = Math.random() * 2 - 1;\n        this.speedY = Math.random() * 2 - 1;\n        this.opacity = Math.random() * 0.5 + 0.2;\n        this.color = this.getRandomColor();\n        this.connectionDistance = 150;\n        this.pulseSpeed = Math.random() * 0.02 + 0.01;\n        this.pulsePhase = Math.random() * Math.PI * 2;\n      }\n\n      getRandomColor() {\n        const colors = ['rgba(99, 102, 241, ', // indigo\n        'rgba(139, 92, 246, ', // purple\n        'rgba(236, 72, 153, ', // pink\n        'rgba(59, 130, 246, ', // blue\n        'rgba(16, 185, 129, ' // emerald\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n      }\n\n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY; // 边界检测\n\n        if (this.x > canvas.width) this.x = 0;else if (this.x < 0) this.x = canvas.width;\n        if (this.y > canvas.height) this.y = 0;else if (this.y < 0) this.y = canvas.height; // 脉冲效果\n\n        this.pulsePhase += this.pulseSpeed;\n        this.currentOpacity = this.opacity + Math.sin(this.pulsePhase) * 0.1;\n      }\n\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.currentOpacity;\n        ctx.fillStyle = this.color + this.currentOpacity + ')';\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = this.color + '0.5)';\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill(); // 添加内部光晕\n\n        const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);\n        gradient.addColorStop(0, this.color + this.currentOpacity * 0.8 + ')');\n        gradient.addColorStop(1, this.color + '0)');\n        ctx.fillStyle = gradient;\n        ctx.fill();\n        ctx.restore();\n      }\n\n      connect(particles) {\n        for (let other of particles) {\n          if (other === this) continue;\n          const dx = this.x - other.x;\n          const dy = this.y - other.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < this.connectionDistance) {\n            const opacity = (1 - distance / this.connectionDistance) * 0.2;\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            ctx.strokeStyle = this.color + opacity + ')';\n            ctx.lineWidth = 0.5;\n            ctx.beginPath();\n            ctx.moveTo(this.x, this.y);\n            ctx.lineTo(other.x, other.y);\n            ctx.stroke();\n            ctx.restore();\n          }\n        }\n      }\n\n    } // 创建粒子\n\n\n    const particles = [];\n    const particleCount = window.innerWidth < 768 ? 30 : 60;\n\n    for (let i = 0; i < particleCount; i++) {\n      particles.push(new Particle());\n    } // 鼠标交互\n\n\n    let mouseX = null;\n    let mouseY = null;\n    canvas.addEventListener('mousemove', e => {\n      mouseX = e.clientX;\n      mouseY = e.clientY;\n    });\n    canvas.addEventListener('mouseleave', () => {\n      mouseX = null;\n      mouseY = null;\n    }); // 动画循环\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 绘制渐变背景\n\n      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n      gradient.addColorStop(0, 'rgba(99, 102, 241, 0.02)');\n      gradient.addColorStop(0.5, 'rgba(139, 92, 246, 0.02)');\n      gradient.addColorStop(1, 'rgba(236, 72, 153, 0.02)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height); // 更新和绘制粒子\n\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw(); // 鼠标交互\n\n        if (mouseX !== null && mouseY !== null) {\n          const dx = particle.x - mouseX;\n          const dy = particle.y - mouseY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < 100) {\n            const force = (100 - distance) / 100;\n            particle.x += dx * force * 0.02;\n            particle.y += dy * force * 0.02;\n          }\n        } // 连接附近的粒子\n\n\n        particle.connect(particles);\n      });\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"particle-canvas\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: 1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ParticleBackground, \"X5bd7Q1XXg1keIMflMhOltk4wyU=\");\n\n_c = ParticleBackground;\nexport default ParticleBackground;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticleBackground\");","map":{"version":3,"sources":["/Users/liuyanjun/therapy_agent/frontend/src/components/ParticleBackground.js"],"names":["React","useEffect","useRef","ParticleBackground","canvasRef","animationRef","canvas","current","ctx","getContext","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","Particle","constructor","x","Math","random","y","size","speedX","speedY","opacity","color","getRandomColor","connectionDistance","pulseSpeed","pulsePhase","PI","colors","floor","length","update","currentOpacity","sin","draw","save","globalAlpha","fillStyle","shadowBlur","shadowColor","beginPath","arc","fill","gradient","createRadialGradient","addColorStop","restore","connect","particles","other","dx","dy","distance","sqrt","strokeStyle","lineWidth","moveTo","lineTo","stroke","particleCount","i","push","mouseX","mouseY","e","clientX","clientY","animate","clearRect","createLinearGradient","fillRect","forEach","particle","force","requestAnimationFrame","removeEventListener","cancelAnimationFrame","position","top","left","zIndex","pointerEvents"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst ParticleBackground = () => {\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // 设置画布尺寸\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    \n    // 粒子类\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 3 + 1;\n        this.speedX = Math.random() * 2 - 1;\n        this.speedY = Math.random() * 2 - 1;\n        this.opacity = Math.random() * 0.5 + 0.2;\n        this.color = this.getRandomColor();\n        this.connectionDistance = 150;\n        this.pulseSpeed = Math.random() * 0.02 + 0.01;\n        this.pulsePhase = Math.random() * Math.PI * 2;\n      }\n      \n      getRandomColor() {\n        const colors = [\n          'rgba(99, 102, 241, ',  // indigo\n          'rgba(139, 92, 246, ',  // purple\n          'rgba(236, 72, 153, ',  // pink\n          'rgba(59, 130, 246, ',  // blue\n          'rgba(16, 185, 129, ',  // emerald\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n      }\n      \n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n        \n        // 边界检测\n        if (this.x > canvas.width) this.x = 0;\n        else if (this.x < 0) this.x = canvas.width;\n        \n        if (this.y > canvas.height) this.y = 0;\n        else if (this.y < 0) this.y = canvas.height;\n        \n        // 脉冲效果\n        this.pulsePhase += this.pulseSpeed;\n        this.currentOpacity = this.opacity + Math.sin(this.pulsePhase) * 0.1;\n      }\n      \n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.currentOpacity;\n        ctx.fillStyle = this.color + this.currentOpacity + ')';\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = this.color + '0.5)';\n        \n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // 添加内部光晕\n        const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);\n        gradient.addColorStop(0, this.color + (this.currentOpacity * 0.8) + ')');\n        gradient.addColorStop(1, this.color + '0)');\n        ctx.fillStyle = gradient;\n        ctx.fill();\n        \n        ctx.restore();\n      }\n      \n      connect(particles) {\n        for (let other of particles) {\n          if (other === this) continue;\n          \n          const dx = this.x - other.x;\n          const dy = this.y - other.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < this.connectionDistance) {\n            const opacity = (1 - distance / this.connectionDistance) * 0.2;\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            ctx.strokeStyle = this.color + opacity + ')';\n            ctx.lineWidth = 0.5;\n            ctx.beginPath();\n            ctx.moveTo(this.x, this.y);\n            ctx.lineTo(other.x, other.y);\n            ctx.stroke();\n            ctx.restore();\n          }\n        }\n      }\n    }\n    \n    // 创建粒子\n    const particles = [];\n    const particleCount = window.innerWidth < 768 ? 30 : 60;\n    \n    for (let i = 0; i < particleCount; i++) {\n      particles.push(new Particle());\n    }\n    \n    // 鼠标交互\n    let mouseX = null;\n    let mouseY = null;\n    \n    canvas.addEventListener('mousemove', (e) => {\n      mouseX = e.clientX;\n      mouseY = e.clientY;\n    });\n    \n    canvas.addEventListener('mouseleave', () => {\n      mouseX = null;\n      mouseY = null;\n    });\n    \n    // 动画循环\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // 绘制渐变背景\n      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n      gradient.addColorStop(0, 'rgba(99, 102, 241, 0.02)');\n      gradient.addColorStop(0.5, 'rgba(139, 92, 246, 0.02)');\n      gradient.addColorStop(1, 'rgba(236, 72, 153, 0.02)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // 更新和绘制粒子\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n        \n        // 鼠标交互\n        if (mouseX !== null && mouseY !== null) {\n          const dx = particle.x - mouseX;\n          const dy = particle.y - mouseY;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < 100) {\n            const force = (100 - distance) / 100;\n            particle.x += dx * force * 0.02;\n            particle.y += dy * force * 0.02;\n          }\n        }\n        \n        // 连接附近的粒子\n        particle.connect(particles);\n      });\n      \n      animationRef.current = requestAnimationFrame(animate);\n    };\n    \n    animate();\n    \n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n  \n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"particle-canvas\"\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 1,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default ParticleBackground;"]},"metadata":{},"sourceType":"module"}